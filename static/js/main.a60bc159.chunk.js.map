{"version":3,"sources":["types/Status.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Status","TodoList","todo","selectedTodo","setSelectedTodo","className","map","t","cn","id","completed","title","type","onClick","currentTodo","FILTER_VALUES","all","active","TodoFilter","query","setQuery","setFilter","onChange","event","target","value","v","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","ok","Error","status","statusText","json","TodoModal","handleCloseModal","useState","user","setUser","useEffect","userId","href","email","name","App","todos","setTodos","errorMessage","setErrorMessage","isLoading","setIsLoading","filter","catch","finally","visibleTodos","useMemo","todosToFilter","searchSymbols","filterStatus","trim","toLowerCase","includes","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a60bc159.chunk.js","sourcesContent":["export enum Status {\n  all = 'all',\n  active = 'active',\n  completed = 'completed',\n}\n","import React from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo[];\n  selectedTodo: Todo | null;\n  setSelectedTodo: (value: Todo) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todo,\n  selectedTodo,\n  setSelectedTodo,\n}) => {\n  const handleClick = (currentTodo: Todo) => {\n    if (setSelectedTodo) {\n      setSelectedTodo(currentTodo);\n    }\n  };\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todo.map(t => {\n          return (\n            <>\n              <tr\n                data-cy=\"todo\"\n                key={t.id}\n                className={cn({\n                  'has-background-info-light': selectedTodo !== null\n                    && selectedTodo.id === t.id,\n                })}\n              >\n                <td className=\"is-vcentered\">{t.id}</td>\n                {t.completed ? (\n                  <td className=\"is-vcentered\">\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  </td>\n                ) : (\n                  <td className=\"is-vcentered\" />\n                )}\n                <td className=\"is-vcentered is-expanded\">\n                  <p\n                    className={t.completed\n                      ? 'has-text-success'\n                      : 'has-text-danger'}\n                  >\n                    {t.title}\n                  </p>\n                </td>\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => handleClick(t)}\n                  >\n                    <span className=\"icon\">\n                      <i className={\n                        selectedTodo !== null && selectedTodo.id === t.id\n                          ? 'far fa-eye-slash'\n                          : 'far fa-eye'\n                      }\n                      />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            </>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport { Status } from '../../types/Status';\n\ntype Props = {\n  query: string;\n  setQuery: (value: string) => void;\n  setFilter: (value: Status) => void;\n};\n\nconst FILTER_VALUES = [Status.all, Status.active, Status.completed];\n\nexport const TodoFilter: React.FC<Props> = (\n  {\n    query,\n    setQuery,\n    setFilter,\n  },\n) => {\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n  };\n\n  const handleFilterChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setFilter(event.target.value as Status);\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={handleFilterChange}\n          >\n            {FILTER_VALUES.map(v => (\n              <option\n                value={v}\n                key={v}\n              >\n                {(Status[v])}\n              </option>\n            ))}\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleQueryChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span\n            className=\"icon is-right\"\n            style={{ pointerEvents: 'all' }}\n          >\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => {\n                setQuery('');\n              }}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => {\n      if (!res.ok) {\n        throw new Error(`${res.status} ${res.statusText}`);\n      }\n\n      return res.json();\n    });\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useState, useEffect } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ntype Props = {\n  selectedTodo: Todo;\n  handleCloseModal: () => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  selectedTodo,\n  handleCloseModal,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n  const currentTodo = selectedTodo;\n\n  useEffect(() => {\n    getUser(selectedTodo.userId)\n      .then(setUser);\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleCloseModal}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {/* <strong className=\"has-text-success\">Done</strong> */}\n              <strong className={selectedTodo.completed\n                ? 'has-text-success'\n                : 'has-text-danger'}\n              >\n                {selectedTodo.completed\n                  ? 'Done'\n                  : 'Planned'}\n              </strong>\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState, useMemo } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { Status } from './types/Status';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [query, setQuery] = useState('');\n  const [filter, setFilter] = useState(Status.all);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getTodos()\n      .then(setTodos)\n      .catch(() => setErrorMessage('There are no todos'))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const filteredTodos = (todosToFilter: Todo[], filterStatus: Status, searchSymbols: string): Todo[] => {\n    if (filterStatus === Status.all && !searchSymbols.trim()) {\n      return todosToFilter;\n    }\n\n    return todosToFilter.filter(currentTodo => {\n      if (filterStatus === Status.active && currentTodo.completed) {\n        return false;\n      }\n\n      if (filterStatus === Status.completed && !currentTodo.completed) {\n        return false;\n      }\n\n      if (searchSymbols.trim()\n        && !currentTodo.title.toLowerCase()\n          .includes(searchSymbols.toLowerCase())\n      ) {\n        return false;\n      }\n\n      return true;\n    });\n  };\n\n  const visibleTodos = useMemo(() => {\n    return filteredTodos(todos, filter, query);\n  }, [todos, filter, query]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                setQuery={setQuery}\n                setFilter={setFilter}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && <Loader />}\n              {todos.length > 0 ? (\n                <TodoList\n                  todo={visibleTodos}\n                  selectedTodo={selectedTodo}\n                  setSelectedTodo={setSelectedTodo}\n                />\n              ) : (\n                <p>{errorMessage}</p>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && <TodoModal handleCloseModal={() => setSelectedTodo(null)} selectedTodo={selectedTodo} />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}